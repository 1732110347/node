57 学习目标

58 数据库的基本概念

59 安装mysql

60 Workbench用法

61 创建数据库和表

62 了解sql

63 select

64 where and or 

65 排序

66 count函数和as关键字

67 演示如何保存和打开sql

68 安装配置mysql
 npm install mysql


69 查询和插入
 执行查询返回的是数组
 
  // 注意：如果执行的是 insert into 插入语句，则 results 是一个对象
 const user = { username: 'Spider-Man', password: 'pcc123' }
 // 定义待执行的 SQL 语句
 const sqlStr = 'insert into users (username, password) values (?, ?)'
 // 执行 SQL 语句

 db.query(sqlStr, [user.username, user.password], (err, results) => {

       // 可以通过 affectedRows 属性，来判断是否插入数据成功 表示影响的行数

  if (results.affectedRows === 1) {
    console.log('插入数据成功!')
  }

  便携方式
  向表中新增数据时，如果数据对象的每个属性和数据表的字段一一对应
  insert into user set ?
   db.query(sqlStr, user, (err, results) => {

70 更新和删除数据
 const sqlStr = 'update users set username=?, password=? where id=?'
 
 便携更新
 /* const user = { id: 6, username: 'aaaa', password: '0000' }
 // 定义 SQL 语句
 const sqlStr = 'update users set ? where id=?'
 // 执行 SQL 语句
 db.query(sqlStr, [user, user.id], (err, results) => {

 删除
 /* const sqlStr = 'delete from users where id=?'

 标记删除
  const sqlStr = 'update users set status=? where id=?'

71 web开发模式
 服务端渲染的概念 服务器发送给客户端的HTML页面，是在服务器通过字符串的拼接，动态生成的。
 因此，客户端不需要使用Ajax这样的技术额外请求页面的数据

 优点
 1 前端耗时少。以为服务器端负责动态生成HTML内容，浏览器只需要直接渲染页面即可。尤其是移动端，省电
 2 有利于SEO，因为服务器端响应的是完整的HTML页面内容，所以爬虫更容易爬取获得信息，有利于SEO

 缺点
 1 占用服务器端资源。即服务器端完成HTML页面内容的拼接，如果请求较多，会对服务器造成一定的访问压力
 2 不利于前后端分离，开发效率低。使用服务器端渲染，则无法进行分工合作，

72 身份认证
 1 服务端渲染推荐使用Session认证机制
 2 前后端分离推荐使用JWT认证机制

73 session原理
 1HTTP协议的无状态性
 HTTP协议的无状态性，指的是客户端每次HTTP请求都是独立的，连续多个请求没有直接关系
 服务器不会主动保留每次HTTP请求的状态

 Cookie
 由一个名称Name、一个值Value和其他几个用于控制Cookie有效期、安全性、使用范围的可选属性组成
 不同域名下的Cookie各自独立，每当客户端发起请求时，会自动把当前域名下所有未过期Cookie发送到服务器

 1 自动发送
 2 域名独立
 3 过期时限
 4 4kb限制

 客户端第一次请求服务器的时候，服务器通过响应头的形式，向客户端发送应该身份认证
 的Cookie，客户端会自动将Cookie保存在浏览器中
 随后，当客户端浏览器每次请求服务器的时候，浏览器会自动将身份认证相关的Cookie通过请求头
 的形式发送给服务器，服务器验明客户端身份
 
 Cookie不具有安全性
 存储在浏览器中，而且浏览器也提供了读写Cookie的API，容易被伪造，不建议隐私数据

74 session中间件的使用
 安装 npm install express-session 

 2 配置express-session 中间件
 安装完后，需要通过app.use()来注册session中间件
 app.use(session({
     secret:'keyboard cat', //secret 属性的值可以任意字符串
     resave:false, //固定写法
     saveUninitialized:true //固定写法
 }))

 3 向session中存数据
 当express-session 中间件配置成功后，即可通过req.session 
 来访问和使用session对象，从而存储用户的关键信息

 才能够通过 req 点出来 session 这个属性

 / 托管静态页面
 app.use(express.static('./pages'))
 // 解析 POST 提交过来的表单数据
 app.use(express.urlencoded({ extended: false }))

 // 登录的 API 接口
 app.post('/api/login', (req, res) => {
  // 判断用户提交的登录信息是否正确
  if (req.body.username !== 'admin' || req.body.password !== '000000') {
    return res.send({ status: 1, msg: '登录失败' })
  }

  // TODO_02：请将登录成功后的用户信息，保存到 Session 中
  // 注意：只有成功配置了 express-session 这个中间件之后，才能够通过 req 点出来 session 这个属性
  req.session.user = req.body // 用户的信息
  req.session.islogin = true // 用户的登录状态

  res.send({ status: 0, msg: '登录成功' })
 })
 

 4 从session中取数据
 // 获取用户姓名的接口
 app.get('/api/username', (req, res) => {
  // TODO_03：请从 Session 中获取用户的名称，响应给客户端
  if (!req.session.islogin) {
    return res.send({ status: 1, msg: 'fail' })
  }
  res.send({
    status: 0,
    msg: 'success',
    username: req.session.user.username,
  })
 })


 5清空session
 调用req.session.destroy()函数，清空服务器保存的session信息
 // 退出登录的接口
 app.post('/api/logout', (req, res) => {
  // TODO_04：清空 Session 信息
  req.session.destroy()
  res.send({
    status: 0,
    msg: '退出登录成功',
  })
 })

75 jwt 了解token的原理
 1 Session 的局限性
 需要配合Cookie才能实现。由于Cookie默认不支持跨域访问，当涉及到前端跨域请求接口
 的时候，需要做好多额外的配置，才能实现跨域Session认证
 当前端请求后端接口不存在跨域问题的时候
 需要跨域请求后端接口的时候，推荐JWT

 用户的信息通过Token字符串的形式，保存在客户端浏览器中。服务器通过还原Token字符串的形式来认证用户的身份

 JWT的组成
 Header 头部 Payload 有效荷载、Signature 签名
 三者之间用英文.相隔 Header.Payload.Signature 
 Payload部分才是真正的用户信息，它是用户信息经过加密之后生成的字符串
 Header和Signature是安全性相关的部分，只是为了保证Token安全性

 JWT的使用方式
 客户端收到服务器返回的JWT后，通常存储在localStorage或sessionStorage
 此后，客户端每次与服务器通信，都要带上JWT的字符串，从而进行身份认证。
 推荐吧JWT放在HTTP请求头的Authorization字段中
 Authorization:Bearer <token>

76 在express中生成token 
 安装 npm install jsonwebtoken express-jwt
 jsonwebtoken 用于生成JWT字符串
 express-jwt 用于将JWT字符串解析还原成JSON对象

 导入相关包
 const jwt = require('jsonwebtoken')
 const expressJWT = require('express-jwt')

 定义secret密钥
 为了保证JWT字符串的安全性，定义一个用于加密和解密的secret密钥
 1 当生成JWT字符串的时候，需要使用secret密钥对用户的信息加密，最终得到加密好的JWT字符串
 2 把JWT字符串解析还原成JSON对象的时候，需要使用密钥进行解密

 const secretKey='xxxx'

 4 在登录成功后生成JWT字符串
 调用jsonwebtoken包提供的sign()方法，将用户的信息加密成JWT字符串，响应给客户端
  // TODO_03：在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。并通过 token 属性发送给客户端
  // 参数1：用户的信息对象
  // 参数2：加密的秘钥
  // 参数3：配置对象，可以配置当前 token 的有效期
  // 记住：千万不要把密码加密到 token 字符中
  const tokenStr = jwt.sign({ username: userinfo.username }, secretKey, { expiresIn: '30s' })


 5 将JWT字符串还原为JSON对象
 客户端每次在访问那些有权限接口的时候，都需要主动通过请求头中的 Authorization 字段
 将Token字符串发送到服务器进行身份认证
 此时，服务器可以通过express-jwt这个中间件，自动将客户端发送过来的Token解析还原成JSON对象
 使用app.use()来注册中间件
 expressJWT({secret:secretKey}) 就是用来解析Token的中间件
 .unless({path:[/^\/api\//]})指定哪些接口不需要访问权限

 app.use(expressJWT({ secret: secretKey }).unless({ path: [/^\/api\//] }))
 
 6 使用req.user获取用户信息
    只要配置成功了 express-jwt 这个中间件，就可以把解析出来的用户信息，挂载到 req.user 属性上


 7 捕获解析JWT失败后产生的错误
  当使用恶心「ress-jwt解析Token字符串时，如果客户端发送过来的Token过期或不合法，会产生一个解析失败的错误
  可以通过Express的错误中间件，捕获
  app.use((err, req, res, next) => {
  // 这次错误是由 token 解析失败导致的
  if (err.name === 'UnauthorizedError') {
    return res.send({
      status: 401,
      message: '无效的token',
    })
  }
  res.send({
    status: 500,
    message: '未知的错误',
  })
 })

77 初始化项目
 1.1创建项目
 1 初始化包管理配置文件
 npm init -y

 2 运行安装express
 npm i express@4.17.1

 3 在项目根目录中新建app.js作为整个项目的入口文件,并初始化
 const express =require('express')
 const app =express()

 app.listen(3007,()=>{
    console.log('http://127.0.0.1:3007');
 })

 1.2 配置 cors 跨域
 1 安装cors
 npm i cors@2.8.5
 2 在 app.js 中导入并配置 cors 中间件：
 // 导入 cors 中间件
 const cors = require('cors')
 // 将 cors 注册为全局中间件
 app.use(cors())

 1.3 配置解析表单数据的中间件
 通过如下的代码，配置解析 application/x-www-form-urlencoded 格式的表单数据的中间件：
 app.use(express.urlencoded({ extended: false }))

78 初始化路由模块

 1.4 初始化路由相关的文件夹
 1 在项目根目录中，新建 router 文件夹，用来存放所有的路由模块
 路由模块中，只存放客户端的请求与处理函数之间的映射关系

  2 在项目根目录中，新建 router_handler 文件夹，用来存放所有的 路由处理函数模块
 路由处理函数模块中，专门负责存放每个路由对应的处理函数

 1.5 初始化用户路由模块
 1 在 router 文件夹中，新建 user.js 文件，作为用户的路由模块，并初始化代码如下：
 const express = require('express')
 // 创建路由对象
 const router = express.Router()

 // 注册新用户
 router.post('/reguser', (req, res) => {
  res.send('reguser OK')
 })

 / / 登录
 router.post('/login', (req, res) => {
  res.send('login OK')
 })

 // 将路由对象共享出去
 module.exports = router
 

 2 在 app.js 中，导入并使用 用户路由模块 ：
 // 导入并注册用户路由模块
 const userRouter = require('./router/user')
 app.use('/api', userRouter)


  1.6 抽离用户路由模块中的处理函数
  目的：为了保证 路由模块 的纯粹性，所有的 路由处理函数，必须抽离到对应的 路由处理函数模块 中

 1 在 /router_handler/user.js 中，使用 exports 对象，分别向外共享如下两个 路由处理函数 ：
 /**
 * 在这里定义和用户相关的路由处理函数，供 /router/user.js 模块进行调用
 */

 // 注册用户的处理函数
 exports.regUser = (req, res) => {
  res.send('reguser OK')
 }

 // 登录的处理函数
 exports.login = (req, res) => {
  res.send('login OK')
 }
 
 2 将 /router/user.js 中的代码修改为如下结构：
 const express = require('express')
 const router = express.Router()

 // 导入用户路由处理函数模块
 const userHandler = require('../router_handler/user')

 // 注册新用户
 router.post('/reguser', userHandler.regUser)
 // 登录
 router.post('/login', userHandler.login)

 module.exports = router

79 开发注册用户的API接口
 2.2 安装并配置 mysql 模块
 在 API 接口项目中，需要安装并配置 mysql 这个第三方模块，来连接和操作 MySQL 数据库

 1 运行如下命令，安装 mysql 模块：
 npm i mysql@2.18.1

 2 在项目根目录中新建 /db/index.js 文件，在此自定义模块中创建数据库的连接对象：
 // 导入 mysql 模块
 const mysql = require('mysql')

 // 创建数据库连接对象
 const db = mysql.createPool({
  host: '127.0.0.1',
  user: 'root',
  password: 'admin123',
  database: 'my_db_01',
 })

 // 向外共享 db 数据库连接对象
 module.exports = db

 2.3 注册
 2.3.0 实现步骤
 1 检测表单数据是否合法
 2 检测用户名是否被占用
 3 对密码进行加密处理
 4 插入新用户

 2.3.1 检测表单数据是否合法
 1 判断用户名和密码是否为空
 
 2.3.2 检测用户名是否被占用
 1 导入数据库操作模块：
 2 定义 SQL 语句：
 3 执行 SQL 语句并根据结果判断用户名是否被占用：

 2.3.3 对密码进行加密处理
 为了保证密码的安全性，不建议在数据库以 明文 的形式保存用户密码，推荐对密码进行 加密存储

 在当前项目中，使用 bcryptjs 对用户密码进行加密，优点：

 加密之后的密码，无法被逆向破解
 同一明文密码多次加密，得到的加密结果各不相同，保证了安全性

 1 运行如下命令，安装指定版本的 bcryptjs ：
 npm i bcryptjs@2.4.3
 
 2 在 /router_handler/user.js 中，导入 bcryptjs ：
 const bcrypt = require('bcryptjs')

 3 在注册用户的处理函数中，确认用户名可用之后，
 调用 bcrypt.hashSync(明文密码, 随机盐的长度) 方法，对用户的密码进行加密处理：
 bcrypt.hashSync(userinfo.password, 10)
 
 2.3.4 插入新用户
 1 定义插入用户的 SQL 语句：

 2 调用 db.query() 执行 SQL 语句，插入新用户：


80 代码优化

 2.4 优化 res.send() 代码
 在处理函数中，需要多次调用 res.send() 向客户端响应 处理失败 的结果，为了简化代码，可以手动封装一个 res.cc() 函数

 在 app.js 中，所有路由之前，声明一个全局中间件，为 res 对象挂载一个 res.cc() 函数 ：
 / / 响应数据的中间件
 app.use(function (req, res, next) {
  // status = 0 为成功； status = 1 为失败； 默认将 status 的值设置为 1，方便处理失败的情况
  res.cc = function (err, status = 1) {
    res.send({
      // 状态
      status,
      // 状态描述，判断 err 是 错误对象 还是 字符串
      message: err instanceof Error ? err.message : err,
    })
  }
  next()
 })


 2.5 优化表单数据验证
 表单验证的原则：前端验证为辅，后端验证为主，后端永远不要相信前端提交过来的任何内容

 在实际开发中，前后端都需要对表单的数据进行合法性的验证，而且，后端做为数据合法性验证的最后一个关口，在拦截非法数据方面，起到了至关重要的作用。

 单纯的使用 if...else... 的形式对数据合法性进行验证，效率低下、出错率高、维护性差。因此，推荐使用第三方数据验证模块，来降低出错率、提高验证的效率与可维护性，让后端程序员把更多的精力放在核心业务逻辑的处理上。

 1 安装 @hapi/joi 包，为表单中携带的每个数据项，定义验证规则：
 npm install @hapi/joi@17.1.0
 npm i joi

 2 安装 @escook/express-joi 中间件，来实现自动对表单数据进行验证的功能：
 npm i @escook/express-joi

 3 新建 /schema/user.js 用户信息验证规则模块，并初始化代码如下：
  const joi = require('@hapi/joi')

 /**
 * string() 值必须是字符串
 * alphanum() 值只能是包含 a-zA-Z0-9 的字符串
 * min(length) 最小长度
 * max(length) 最大长度
 * required() 值是必填项，不能为 undefined
 * pattern(正则表达式) 值必须符合正则表达式的规则
 */

 // 用户名的验证规则
 const username = joi.string().alphanum().min(1).max(10).required()
 // 密码的验证规则
 const password = joi
  .string()
  .pattern(/^[\S]{6,12}$/)
  .required()

 // 注册和登录表单的验证规则对象
 exports.reg_login_schema = {
  // 表示需要对 req.body 中的数据进行验证
  body: {
    username,
    password,
  },
 }
 
 5 在 app.js 的全局错误级别中间件中，
 捕获验证失败的错误，并把验证失败的结果响应给客户端：
 const joi = require('@hapi/joi')

 // 错误中间件
 app.use(function (err, req, res, next) {
  // 数据验证失败
  if (err instanceof joi.ValidationError) return res.cc(err)
  // 未知错误
  res.cc(err)
 })

 res.send不能连续两次调用

81 开发登录的API接口
 2.6 登录

 2.6.0 实现步骤
 检测表单数据是否合法
 根据用户名查询用户的数据
 判断用户输入的密码是否正确
 生成 JWT 的 Token 字符串

 2.6.1 检测登录表单的数据是否合法
 将 /router/user.js 中 登录 的路由代码修改如下：
 // 登录的路由
 router.post('/login', expressJoi(reg_login_schema), userHandler.login)
 
 2.6.2 根据用户名查询用户的数据
 1 接收表单数据：
 const userinfo = req.body
 
 2 定义 SQL 语句：
 const sql = `select * from ev_users where username=?`

 3 执行 SQL 语句，查询用户的数据：
 db.query(sql, userinfo.username, function (err, results) {
  // 执行 SQL 语句失败
  if (err) return res.cc(err)
  // 执行 SQL 语句成功，但是查询到数据条数不等于 1
  if (results.length !== 1) return res.cc('登录失败！')
  // TODO：判断用户输入的登录密码是否和数据库中的密码一致
 })


 2.6.3 判断用户输入的密码是否正确
 核心实现思路：调用 bcrypt.compareSync(用户提交的密码, 数据库中的密码) 方法比较密码是否一致

 返回值是布尔值（true 一致、false 不一致）

 具体的实现代码如下：

 // 拿着用户输入的密码,和数据库中存储的密码进行对比
 const compareResult = bcrypt.compareSync(userinfo.password, results[0].password)

 // 如果对比的结果等于 false, 则证明用户输入的密码错误
 if (!compareResult) {
  return res.cc('登录失败！')
 }


   // 拿着用户输入的密码,和数据库中存储的密码进行对比
    const compareResult = bcrypt.compareSync(userinfo.password, results[0].password)


82 token的生成与验证
 2.6.4 生成 JWT 的 Token 字符串
 核心注意点：在生成 Token 字符串的时候，一定要剔除 密码 和 头像 的值

 1 通过 ES6 的高级语法，快速剔除 密码 和 头像 的值：
 // 剔除完毕之后，user 中只保留了用户的 id, username, nickname, email 这四个属性的值
 const user = { ...results[0], password: '', user_pic: '' }
 

 2 运行如下的命令，安装生成 Token 字符串的包：
 npm i jsonwebtoken@8.5.1
 

 3 在 /router_handler/user.js 模块的头部区域，导入 jsonwebtoken 包：
 // 用这个包来生成 Token 字符串
 const jwt = require('jsonwebtoken')
 

 4 创建 config.js 文件，并向外共享 加密 和 还原 Token 的 jwtSecretKey 字符串：
 module.exports = {
  jwtSecretKey: 'itheima No1. ^_^',
 }
 

 5 将用户信息对象加密成 Token 字符串：
 // 导入配置文件
 const config = require('../config')

 // 生成 Token 字符串
 const tokenStr = jwt.sign(user, config.jwtSecretKey, {
  expiresIn: '10h', // token 有效期为 10 个小时
 })
 

 6 将生成的 Token 字符串响应给客户端：
 res.send({
  status: 0,
  message: '登录成功！',
  // 为了方便客户端使用 Token，在服务器端直接拼接上 Bearer 的前缀
  token: 'Bearer ' + tokenStr,
 })


 2.7 配置解析 Token 的中间件
 1 运行如下的命令，安装解析 Token 的中间件：
 npm i express-jwt@5.3.3

 2 在 app.js 中注册路由之前，配置解析 Token 的中间件：
 // 导入配置文件
 const config = require('./config')

 // 解析 token 的中间件
 const expressJWT = require('express-jwt')

 // 使用 .unless({ path: [/^\/api\//] }) 指定哪些接口不需要进行 Token 的身份认证
 app.use(expressJWT({ secret: config.jwtSecretKey }).unless({ path: [/^\/api\//] }))

 3 在 app.js 中的 错误级别中间件 里面，捕获并处理 Token 认证失败后的错误：
 // 错误中间件
 app.use(function (err, req, res, next) {
  // 省略其它代码...

  // 捕获身份认证失败的错误
  if (err.name === 'UnauthorizedError') return res.cc('身份认证失败！')

  // 未知错误...
 })
 
83 开发获取用户的基本信息的接口
 3. 个人中心
 3.1 获取用户的基本信息

 3.1.0 实现步骤
 1 初始化 路由 模块
 2 初始化 路由处理函数 模块
 3 获取用户的基本信息

 3.1.1 初始化路由模块
 1 创建 /router/userinfo.js 路由模块，并初始化如下的代码结构：
 2 在 app.js 中导入并使用个人中心的路由模块：

 3.1.2 初始化路由处理函数模块
 1 创建 /router_handler/userinfo.js 路由处理函数模块，并初始化如下的代码结构：
 2 修改 /router/userinfo.js 中的代码如下：

 3.1.3 获取用户的基本信息
 1 在 /router_handler/userinfo.js 头部导入数据库操作模块：
 2 定义 SQL 语句：
 3 调用 db.query() 执行 SQL 语句：
 3.1.3 获取用户的基本信息
84 开发更新用户的接口

85 开发重置密码的接口

86 更换头像的接口

87 总结

88 新建数据表

89 开发获取文章分类表的接口

90 开发新增文章分类的接口

91 开发根据id删除文章分类的接口

92 根据id获取文章

93 根据id更新

94 新建文章表

95 初始化发布文章的路由模块

96 演示API接口的使用















